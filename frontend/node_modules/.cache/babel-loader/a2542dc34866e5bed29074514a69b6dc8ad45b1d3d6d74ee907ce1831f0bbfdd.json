{"ast":null,"code":"class Api {\n  constructor(data) {\n    this._url = data.baseUrl;\n  }\n  _getResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n    ;\n  }\n  getInfo(token) {\n    return fetch(`${this._url}users/me`, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(this._getResponse).catch(err => console.error(err));\n  }\n  getInitialCards(token) {\n    return fetch(`${this._url}cards`, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(this._getResponse);\n  }\n  setUserInfo(data, token) {\n    return fetch(`${this._url}users/me`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: data.username,\n        about: data.description\n      })\n    }).then(this._getResponse);\n  }\n  setAvatar(data, token) {\n    return fetch(`${this._url}users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._getResponse);\n  }\n  addCard(cardData, token) {\n    return fetch(`${this._url}cards`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: cardData.name,\n        link: cardData.link\n      })\n    }).then(this._getResponse);\n  }\n  addLike(cardId, token) {\n    return fetch(`${this._url}cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._auth\n      }\n    }).then(this._getResponse);\n  }\n  removeLike(cardId, token) {\n    return fetch(`${this._url}cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(this._getResponse);\n  }\n  deleteCard(cardId, token) {\n    return fetch(`${this._url}cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(this._getResponse);\n  }\n}\nconst api = new Api({\n  baseUrl: 'http://localhost:3000'\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","data","_url","baseUrl","_getResponse","res","ok","json","Promise","reject","status","getInfo","token","fetch","headers","then","catch","err","console","error","getInitialCards","setUserInfo","method","body","JSON","stringify","name","username","about","description","setAvatar","avatar","addCard","cardData","link","addLike","cardId","authorization","_auth","removeLike","deleteCard","api"],"sources":["/Users/alexey/Desktop/dev/react-mesto-auth/src/utils/api.js"],"sourcesContent":["class Api {\n  constructor(data) {\n    this._url = data.baseUrl;\n  }\n\n  _getResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);;\n  }\n\n  getInfo(token) {\n    return fetch(`${this._url}users/me`, {\n      headers: {\n        \"Authorization\" : `Bearer ${token}`\n      }\n    })\n    .then(this._getResponse)\n    .catch(err => console.error(err))\n  }\n\n  getInitialCards(token) {\n    return fetch(`${this._url}cards`, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    })\n    .then(this._getResponse)\n  }\n\n  setUserInfo(data, token) {\n    return fetch(`${this._url}users/me`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: data.username,\n        about: data.description\n      })\n    })\n    .then(this._getResponse)\n  }\n\n  setAvatar(data, token) {\n    return fetch(`${this._url}users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        avatar: data.avatar,\n      })\n    })\n    .then(this._getResponse)\n  }\n\n  addCard(cardData, token) {\n    return fetch(`${this._url}cards`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: cardData.name,\n        link: cardData.link\n      })\n    })\n    .then(this._getResponse)\n  }\n\n  addLike(cardId, token) {\n    return fetch(`${this._url}cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._auth\n      }\n    })\n    .then(this._getResponse)\n  }\n\n  removeLike(cardId, token) {\n    return fetch(`${this._url}cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    })\n    .then(this._getResponse)\n  }\n\n  deleteCard(cardId, token) {\n    return fetch(`${this._url}cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    })\n    .then(this._getResponse)\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: 'http://localhost:3000',\n});\n\nexport default api;"],"mappings":"AAAA,MAAMA,GAAG,CAAC;EACRC,WAAWA,CAACC,IAAI,EAAE;IAChB,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACE,OAAO;EAC1B;EAEAC,YAAYA,CAACC,GAAG,EAAE;IAChB,IAAIA,GAAG,CAACC,EAAE,EAAE;MACV,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;IACnB;IACA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;IAAC;EACjD;EAEAC,OAAOA,CAACC,KAAK,EAAE;IACb,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACX,IAAK,UAAS,EAAE;MACnCY,OAAO,EAAE;QACP,eAAe,EAAI,UAASF,KAAM;MACpC;IACF,CAAC,CAAC,CACDG,IAAI,CAAC,IAAI,CAACX,YAAY,CAAC,CACvBY,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC;EACnC;EAEAG,eAAeA,CAACR,KAAK,EAAE;IACrB,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACX,IAAK,OAAM,EAAE;MAChCY,OAAO,EAAE;QACP,eAAe,EAAG,UAASF,KAAM;MACnC;IACF,CAAC,CAAC,CACDG,IAAI,CAAC,IAAI,CAACX,YAAY,CAAC;EAC1B;EAEAiB,WAAWA,CAACpB,IAAI,EAAEW,KAAK,EAAE;IACvB,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACX,IAAK,UAAS,EAAE;MACnCoB,MAAM,EAAE,OAAO;MACfR,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASF,KAAM;MACnC,CAAC;MACDW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAEzB,IAAI,CAAC0B,QAAQ;QACnBC,KAAK,EAAE3B,IAAI,CAAC4B;MACd,CAAC;IACH,CAAC,CAAC,CACDd,IAAI,CAAC,IAAI,CAACX,YAAY,CAAC;EAC1B;EAEA0B,SAASA,CAAC7B,IAAI,EAAEW,KAAK,EAAE;IACrB,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACX,IAAK,iBAAgB,EAAE;MAC1CoB,MAAM,EAAE,OAAO;MACfR,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASF,KAAM;MACnC,CAAC;MACDW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBM,MAAM,EAAE9B,IAAI,CAAC8B;MACf,CAAC;IACH,CAAC,CAAC,CACDhB,IAAI,CAAC,IAAI,CAACX,YAAY,CAAC;EAC1B;EAEA4B,OAAOA,CAACC,QAAQ,EAAErB,KAAK,EAAE;IACvB,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACX,IAAK,OAAM,EAAE;MAChCoB,MAAM,EAAE,MAAM;MACdR,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASF,KAAM;MACnC,CAAC;MACDW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAEO,QAAQ,CAACP,IAAI;QACnBQ,IAAI,EAAED,QAAQ,CAACC;MACjB,CAAC;IACH,CAAC,CAAC,CACDnB,IAAI,CAAC,IAAI,CAACX,YAAY,CAAC;EAC1B;EAEA+B,OAAOA,CAACC,MAAM,EAAExB,KAAK,EAAE;IACrB,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACX,IAAK,SAAQkC,MAAO,QAAO,EAAE;MAChDd,MAAM,EAAE,KAAK;MACbR,OAAO,EAAE;QACPuB,aAAa,EAAE,IAAI,CAACC;MACtB;IACF,CAAC,CAAC,CACDvB,IAAI,CAAC,IAAI,CAACX,YAAY,CAAC;EAC1B;EAEAmC,UAAUA,CAACH,MAAM,EAAExB,KAAK,EAAE;IACxB,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACX,IAAK,SAAQkC,MAAO,QAAO,EAAE;MAChDd,MAAM,EAAE,QAAQ;MAChBR,OAAO,EAAE;QACP,eAAe,EAAG,UAASF,KAAM;MACnC;IACF,CAAC,CAAC,CACDG,IAAI,CAAC,IAAI,CAACX,YAAY,CAAC;EAC1B;EAEAoC,UAAUA,CAACJ,MAAM,EAAExB,KAAK,EAAE;IACxB,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACX,IAAK,SAAQkC,MAAO,EAAC,EAAE;MAC1Cd,MAAM,EAAE,QAAQ;MAChBR,OAAO,EAAE;QACP,eAAe,EAAG,UAASF,KAAM;MACnC;IACF,CAAC,CAAC,CACDG,IAAI,CAAC,IAAI,CAACX,YAAY,CAAC;EAC1B;AAEF;AAEA,MAAMqC,GAAG,GAAG,IAAI1C,GAAG,CAAC;EAClBI,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,eAAesC,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}